{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"\ud83d\udea7 This site is under construction.Stay tuned for updates! \ud83d\udea7  <p>Next-generation serverless-application runtime, for implementing and deploying scalable Cloud services with transactional guarantees.</p> <p>Styx is built with a focus on programmability and serverless execution, Styx helps researchers and developers build modern data-intensive applications with ease.</p> <p>Whether you're exploring cloud-native design patterns, evaluating transaction guarantees, or building next-generation data infrastructure \u2014 Styx provides the foundation.</p> <p>Get Started \u2192</p> <ul> <li> <p> High Performance</p> <p>Styx's streaming-first approach offers high throughput at low latency.</p> <p> Published Results</p> </li> <li> <p> Correctness</p> <p>End-to-end exactly-once, serializable ACID transactions, automatic fault tolerance.</p> </li> <li> <p> Set up in 5 minutes</p> <p>Install <code>Styx</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> Container Friendly</p> <p>Styx can be deployed in Docker containers and K8s.</p> <p> Reference</p> </li> <li> <p> Made to (auto)scale in the Cloud</p> <p>Re-scale your application with a single line of code.</p> <p> Customization</p> </li> <li> <p> Open Source, Apache 2</p> <p>Styx is licensed under Apache License V2 and available on GitHub.</p> <p> License</p> </li> </ul>"},{"location":"people/","title":"Team","text":"Kyriakos Psarakis George Christodoulou George Siachamis Oto Mraz Marios Fragkoulis Asterios Katsifodimos"},{"location":"publications/","title":"Latest Publications","text":"\ud83d\udcdc PDF          SIGMOD 2025 Styx: Transactional Stateful Functions on Streaming Dataflows        Kyriakos Psarakis, George Christodoulou, George Siachamis, Marios Fragkoulis, Asterios Katsifodimos      <p>       Developing stateful cloud applications, such as low-latency workflows and microservices with strict consistency requirements,       remains arduous for programmers. The Stateful Functions-as-a-Service (SFaaS) paradigm aims to serve these use cases.        However, existing approaches provide weak transactional guarantees or perform expensive external state accesses requiring        inefficient transactional protocols that increase execution latency.            In this paper, we present Styx, a novel dataflow-based SFaaS runtime that executes serializable transactions consisting of stateful functions       that form arbitrary call-graphs with exactly-once guarantees. Styx extends a deterministic transactional protocol by contributing:        i) a function acknowledgment scheme to determine transaction boundaries required in SFaaS workloads,       ii) a function-execution caching mechanism,       and iii) an early commit-reply mechanism that substantially reduces transaction execution latency.       Experiments with the YCSB, TPC-C, and Deathstar benchmarks show that Styx outperforms state-of-the-art approaches       by achieving at least one order of magnitude higher throughput while exhibiting near-linear scalability and low latency.     </p>              \ud83d\udcdc PDF          CIDR 2025 Transactional Cloud Applications Go with the (Data)Flow        Kyriakos Psarakis, George Christodoulou, Marios Fragkoulis, Asterios Katsifodimos      <p>Traditional monolithic applications are migrated to the cloud, typically using a microservice-like architecture.  Although this migration leads to significant benefits such as scalability and development agility, it also leaves behind  the transactional guarantees that database systems have provided to monolithic applications for decades. In the cloud era,  developers build transactional and fault-tolerant distributed applications by explicitly programming transaction protocols  at the application level.In this paper, we argue that the principles behind the streaming dataflow execution model  and deterministic transactional protocols provide a powerful and suitable substrate for executing transactional cloud applications.  To this end, we introduce Styx, a transactional application runtime based on streaming dataflows that enables an object-oriented programming  model for scalable, fault-tolerant cloud applications with serializable guarantees.</p>              \ud83d\udcdc PDF          EDBT 2024 Stateful Entities: Object-oriented Cloud Applications as Distributed Dataflows        Kyriakos Psarakis, Wouter Zorgdrager, Marios Fragkoulis, Guido Salvaneschi, Asterios Katsifodimos      <p>Although the cloud has reached a state of robustness, the burden of using its resources falls on the shoulders of  programmers who struggle to keep up with ever-growing cloud infrastructure services and abstractions. As a result,  state management, scaling, operation, and failure management of scalable cloud applications, require disproportionately  more effort than developing the applications' actual business logic.Our vision aims to raise the abstraction  level for programming scalable cloud applications by compiling stateful entities -- \u00a0a programming model enabling  imperative transactional programs authored in Python -- \u00a0into stateful streaming dataflows. We propose a compiler  pipeline that analyzes the abstract syntax tree of stateful entities and transforms them into an intermediate representation  based on stateful dataflow graphs. It then compiles that intermediate representation into different dataflow engines, leveraging  their exactly-once message processing guarantees to prevent state or failure management primitives from \"leaking\" into the level of the programming model. Preliminary experiments with a proof of concept implementation show that despite program  transformation and translation to dataflows, stateful entities can perform at sub-100ms latency even for transactional workloads.</p>"},{"location":"styx-docs/async-styx-client/","title":"Async Styx Client","text":""},{"location":"styx-docs/async-styx-client/#styx.client.async_client.AsyncStyxClient","title":"<code>AsyncStyxClient(styx_coordinator_adr, styx_coordinator_port, kafka_url)</code>","text":"<p>               Bases: <code>BaseStyxClient</code></p> <p>Asynchronous client for interacting with a Styx deployment using asyncio and aiokafka.</p> <p>Handles event submission, result polling, and metadata updates over Kafka.</p> <p>Initializes an asynchronous Styx client.</p> <p>Parameters:</p> Name Type Description Default <code>styx_coordinator_adr</code> <code>str</code> <p>Address of the Styx coordinator.</p> required <code>styx_coordinator_port</code> <code>int</code> <p>Port of the Styx coordinator.</p> required <code>kafka_url</code> <code>str</code> <p>Kafka bootstrap server URL.</p> required"},{"location":"styx-docs/async-styx-client/#styx.client.async_client.AsyncStyxClient.close","title":"<code>close()</code>  <code>async</code>","text":"<p>Closes the client by stopping Kafka consumers/producers and cancelling tasks.</p>"},{"location":"styx-docs/async-styx-client/#styx.client.async_client.AsyncStyxClient.flush","title":"<code>flush()</code>  <code>async</code>","text":"<p>Flushes the Kafka producer buffer to ensure all messages are sent.</p>"},{"location":"styx-docs/async-styx-client/#styx.client.async_client.AsyncStyxClient.get_operator_partition","title":"<code>get_operator_partition(key, operator)</code>  <code>async</code>","text":"<p>Returns the partition for a given key/operator pair.</p> <p>Waits for the metadata graph to be known before resolving the partition.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Any</code> <p>Partitioning key.</p> required <code>operator</code> <code>BaseOperator</code> <p>Operator to resolve.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Partition number.</p>"},{"location":"styx-docs/async-styx-client/#styx.client.async_client.AsyncStyxClient.open","title":"<code>open(consume=True)</code>  <code>async</code>","text":"<p>Initializes the Kafka producer and optionally starts result and metadata consumer tasks.</p> <p>Parameters:</p> Name Type Description Default <code>consume</code> <code>bool</code> <p>Whether to consume results in a background task. Defaults to True.</p> <code>True</code>"},{"location":"styx-docs/async-styx-client/#styx.client.async_client.AsyncStyxClient.send_event","title":"<code>send_event(operator, key, function, params=tuple(), serializer=Serializer.MSGPACK)</code>  <code>async</code>","text":"<p>Sends a single function invocation event to an operator.</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>BaseOperator</code> <p>Target operator.</p> required <code>key</code> <code>Any</code> <p>Partitioning key for the event.</p> required <code>function</code> <code>Type | str</code> <p>Function or method to invoke.</p> required <code>params</code> <code>tuple</code> <p>Parameters to the function.</p> <code>tuple()</code> <code>serializer</code> <code>Serializer</code> <p>Serialization strategy. Defaults to MSGPACK.</p> <code>MSGPACK</code> <p>Returns:</p> Name Type Description <code>StyxAsyncFuture</code> <code>StyxAsyncFuture</code> <p>Future representing the pending result of the event.</p>"},{"location":"styx-docs/async-styx-client/#styx.client.async_client.AsyncStyxClient.submit_dataflow","title":"<code>submit_dataflow(stateflow_graph, external_modules=None)</code>  <code>async</code>","text":"<p>Submits a dataflow graph to the Styx coordinator.</p> <p>Parameters:</p> Name Type Description Default <code>stateflow_graph</code> <code>StateflowGraph</code> <p>The graph to submit.</p> required <code>external_modules</code> <code>tuple</code> <p>External modules required by the graph.</p> <code>None</code>"},{"location":"styx-docs/docker-env-variables/","title":"Environment Variables","text":""},{"location":"styx-docs/docker-env-variables/#styx-coordinator","title":"Styx Coordinator","text":"<p>The following environment variables configure the behavior of the Styx Coordinator, including heartbeats, Kafka settings, snapshotting, and object storage.</p>"},{"location":"styx-docs/docker-env-variables/#core-configuration","title":"\ud83e\udded Core Configuration","text":"Variable Default Value Description <code>KAFKA_URL</code> <code>KAFKA_HOST:KAFKA_PORT</code> Kafka bootstrap server for messaging <code>HEARTBEAT_LIMIT</code> <code>5000</code> (ms) Max time before a worker is considered dead <code>HEARTBEAT_CHECK_INTERVAL</code> <code>500</code> (ms) How often to check worker heartbeats <code>MAX_OPERATOR_PARALLELISM</code> <code>10</code> Max number of operator partitions <code>PROTOCOL</code> <code>Protocols.Aria</code> Transaction execution protocol used by Styx"},{"location":"styx-docs/docker-env-variables/#snapshot-state","title":"\ud83e\udea3 Snapshot &amp; State","text":"Variable Default Value Description <code>SNAPSHOT_BUCKET_NAME</code> <code>styx-snapshots</code> S3/MinIO bucket for storing snapshots <code>SNAPSHOT_FREQUENCY_SEC</code> <code>10</code> (seconds) How often to take a snapshot <code>SNAPSHOT_COMPACTION_INTERVAL_SEC</code> <code>10</code> (seconds) Interval for compacting snapshots"},{"location":"styx-docs/docker-env-variables/#minio-object-storage","title":"\u2699\ufe0f MinIO / Object Storage","text":"Variable Source Description <code>MINIO_URL</code> <code>MINIO_HOST:MINIO_PORT</code> Full URL to connect to MinIO <code>MINIO_ACCESS_KEY</code> Required Access key for the MinIO user <code>MINIO_SECRET_KEY</code> Required Secret key for the MinIO user"},{"location":"styx-docs/docker-env-variables/#fault-tolerance-restart","title":"\ud83d\udee1\ufe0f Fault Tolerance &amp; Restart","text":"Variable Default Value Description <code>MAX_WAIT_FOR_RESTARTS_SEC</code> <code>0</code> (seconds) How long to wait for the failed container(s) to restart before Styx initiates the automatic recovery"},{"location":"styx-docs/docker-env-variables/#styx-worker","title":"Styx Worker","text":"<p>These environment variables configure the Styx Worker, including discovery, parallelism, heartbeat, snapshotting, and conflict resolution.</p>"},{"location":"styx-docs/docker-env-variables/#discovery-coordination","title":"\ud83e\udded Discovery &amp; Coordination","text":"Variable Required / Default Description <code>DISCOVERY_HOST</code> Required Hostname or IP of the Coordinator <code>DISCOVERY_PORT</code> Required Port used to communicate with Coordinator"},{"location":"styx-docs/docker-env-variables/#kafka-heartbeat","title":"\u2699\ufe0f Kafka &amp; Heartbeat","text":"Variable Default Value Description <code>KAFKA_URL</code> Required Kafka broker address <code>HEARTBEAT_INTERVAL</code> <code>500</code> (ms) Frequency at which the worker sends heartbeats"},{"location":"styx-docs/docker-env-variables/#parallelism-threads","title":"\ud83e\uddf5 Parallelism &amp; Threads","text":"Variable Default Value Description <code>WORKER_THREADS</code> (<code>N_THREADS</code>) <code>1</code> Number of Styx workers within the container <code>SNAPSHOTTING_THREADS</code> <code>4</code> Threads dedicated to snapshotting"},{"location":"styx-docs/docker-env-variables/#snapshotting","title":"\ud83e\udea3 Snapshotting","text":"Variable Default Value Description <code>SNAPSHOT_BUCKET_NAME</code> <code>styx-snapshots</code> Bucket where snapshots are stored <code>SNAPSHOT_FREQUENCY</code> <code>10</code> (seconds) Snapshot frequency in epochs"},{"location":"styx-docs/docker-env-variables/#object-storage-minio","title":"\ud83d\udce6 Object Storage (MinIO)","text":"Variable Source Description <code>MINIO_URL</code> <code>MINIO_HOST:MINIO_PORT</code> Address of the MinIO server <code>MINIO_ACCESS_KEY</code> Required MinIO access key <code>MINIO_SECRET_KEY</code> Required MinIO secret key"},{"location":"styx-docs/docker-env-variables/#conflict-detection-strategy","title":"\ud83d\udcd0 Conflict Detection &amp; Strategy","text":"Variable Default Value Description <code>CONFLICT_DETECTION_METHOD</code> <code>0</code> Styx's conflict detection strategy <code>FALLBACK_STRATEGY_PERCENTAGE</code> <code>-0.1</code> % aborts before fallback logic triggers (negative enables it at all times) <code>USE_FALLBACK_CACHE</code> <code>True</code> Whether to use the fallback cache mechanism"},{"location":"styx-docs/docker-env-variables/#epoch-sequence-control","title":"\u23f1\ufe0f Epoch &amp; Sequence Control","text":"Variable Default Value Description <code>EPOCH_INTERVAL_MS</code> <code>1</code> (ms) Kafka polling rate <code>SEQUENCE_MAX_SIZE</code> <code>1000</code> Max size of a transactional epoch per Styx worker"},{"location":"styx-docs/overview/","title":"Overview","text":"<p>Here's the client API of Styx that you can use in any web framework <code>sync</code> or <code>async</code> or a local client. </p> <p>Furthermore, we document the programming model of Styx that revolves around operators that contain stateful functions.</p> <p>Finally, we provide a complete example how Styx with a front end API interface can be used to create an asynchronous event driven shopping cart microservice deployment.</p> <p> Shopping Cart Example</p>"},{"location":"styx-docs/quickstart/","title":"Quickstart","text":"\ud83d\udea7 We are in the process of adding styx-package on PyPi, the dockerfiles on Dockerhub and a  local runner so that you don't have to deploy a Styx cluster for debugging and streamline the development process. \ud83d\udea7  <p>Requirements: </p> <ul> <li>A <code>Python 3.13</code> environment</li> <li><code>Docker</code></li> <li><code>Docker Compose</code></li> </ul> <p>To start clone the Styx repository:</p> <pre><code>git clone https://github.com/delftdata/styx\n</code></pre> <p>Install the styx-package:</p> <pre><code>pip install ./styx-package/\n</code></pre> <p>Next start a Styx cluster by calling:</p> <pre><code>./scripts/start_styx_cluster.sh [scale_factor] [epoch_size]\n</code></pre> <p><code>scale_factor</code> is how many Styx workers you want deployed and <code>epoch_size</code> the size of a transactional epoch in terms of number of transactions.</p> <p>Now you are ready to submit your first stateful dataflow graph to the Styx cluster for processing!</p>"},{"location":"styx-docs/rescale/","title":"Rescale","text":"\ud83d\udea7 This is part of a future release.Stay tuned for updates! \ud83d\udea7  <p>Since Styx is a serverless system it needs to scale up or down to match the load at any moment in time.</p> <p>The way to do that in Styx is the following, just simply resubmit the graph with a new partitioning:</p> <pre><code>from styx.common.stateflow_graph import StateflowGraph\nfrom styx.common.operator import Operator\nfrom styx.common.local_state_backends import LocalStateBackend\nfrom styx.client.sync_client import SyncStyxClient\n\nstyx_client = SyncStyxClient(styx_coordinator_adr=\"0.0.0.0\", styx_coordinator_port=\"8080\", kafka_url=\"KAFKA_URL\")\n\n# Lets assume that this has been already submitted previously\nsubmitted_operator = Operator(name=\"example\")\n\nnew_number_of_partitions: int = 2\nsubmitted_operator.set_n_partitions(new_number_of_partitions)\nupdated_graph = StateflowGraph(name=\"example\", operator_state_backend=LocalStateBackend.DICT)\nupdated_graph.add_operator(submitted_operator)\n\nstyx_client.submit_dataflow(updated_graph)\n</code></pre> <p>In the future we plan to add an autoscaler to Styx's coordinator to automate this process.</p>"},{"location":"styx-docs/serialization/","title":"Serialization","text":""},{"location":"styx-docs/serialization/#styx.common.serialization.Serializer","title":"<code>Serializer</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of supported serialization formats.</p> Values <p>CLOUDPICKLE: Uses <code>cloudpickle</code> for serialization. MSGPACK: Uses <code>msgspec.msgpack</code> for serialization. PICKLE: Uses Python\u2019s built-in <code>pickle</code>. NONE: No serialization applied.</p>"},{"location":"styx-docs/serialization/#styx.common.serialization.msgpack_serialization","title":"<code>msgpack_serialization(serializable_object)</code>","text":"<p>Serializes an object using MessagePack.</p> <p>Parameters:</p> Name Type Description Default <code>serializable_object</code> <code>object</code> <p>Object to serialize.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>Serialized byte representation.</p>"},{"location":"styx-docs/serialization/#styx.common.serialization.cloudpickle_serialization","title":"<code>cloudpickle_serialization(serializable_object)</code>","text":"<p>Serializes an object using cloudpickle.</p> <p>Parameters:</p> Name Type Description Default <code>serializable_object</code> <code>object</code> <p>Object to serialize.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>Serialized byte representation.</p>"},{"location":"styx-docs/serialization/#styx.common.serialization.pickle_serialization","title":"<code>pickle_serialization(serializable_object)</code>","text":"<p>Serializes an object using Python's built-in pickle module.</p> <p>Parameters:</p> Name Type Description Default <code>serializable_object</code> <code>object</code> <p>Object to serialize.</p> required <p>Returns:</p> Name Type Description <code>bytes</code> <code>bytes</code> <p>Serialized byte representation.</p>"},{"location":"styx-docs/serialization/#styx.common.serialization.msgpack_deserialization","title":"<code>msgpack_deserialization(serialized_object)</code>","text":"<p>Deserializes a MessagePack-encoded byte object.</p> <p>Parameters:</p> Name Type Description Default <code>serialized_object</code> <code>bytes</code> <p>Serialized MessagePack bytes.</p> required <p>Returns:</p> Name Type Description <code>object</code> <code>object</code> <p>The deserialized object.</p>"},{"location":"styx-docs/serialization/#styx.common.serialization.cloudpickle_deserialization","title":"<code>cloudpickle_deserialization(serialized_object)</code>","text":"<p>Deserializes a cloudpickle-encoded byte object.</p> <p>Parameters:</p> Name Type Description Default <code>serialized_object</code> <code>bytes</code> <p>Serialized cloudpickle bytes.</p> required <p>Returns:</p> Name Type Description <code>object</code> <code>object</code> <p>The deserialized object.</p>"},{"location":"styx-docs/serialization/#styx.common.serialization.pickle_deserialization","title":"<code>pickle_deserialization(serialized_object)</code>","text":"<p>Deserializes a pickle-encoded byte object.</p> <p>Parameters:</p> Name Type Description Default <code>serialized_object</code> <code>bytes</code> <p>Serialized pickle bytes.</p> required <p>Returns:</p> Name Type Description <code>object</code> <code>object</code> <p>The deserialized object.</p>"},{"location":"styx-docs/shopping-cart-example/","title":"\ud83d\uded2 Styx Shopping Cart Example","text":"<p>This example demonstrates how to build a shopping cart microservice deployment using Styx. It combines three Styx stateful operators \u2014 <code>order</code>, <code>payment</code>, and <code>stock</code> \u2014 orchestrated via a Sanic-based async REST API.</p>"},{"location":"styx-docs/shopping-cart-example/#overview","title":"Overview","text":"<p>The shopping cart microservice deployment example showcases:</p> <ul> <li>A Sanic-based HTTP API as the frontend interface</li> <li>A StateflowGraph with:<ul> <li><code>order_operator</code>: creates orders and handles checkouts</li> <li><code>payment_operator</code>: manages user balances</li> <li><code>stock_operator</code>: maintains inventory and pricing</li> </ul> </li> <li>Full asynchronous event-driven coordination between services using remote async calls</li> </ul>"},{"location":"styx-docs/shopping-cart-example/#setup","title":"Setup","text":"<ol> <li> <p>Start the Styx Coordinator and Worker, and the Locust workload client following the demo README. This will start a Styx deployment and a Sanic HTTP API as the frontend interface.</p> </li> <li> <p>Submit the dataflow graph:</p> </li> </ol> <pre><code>POST /submit/&lt;n_partitions&gt;\n</code></pre>"},{"location":"styx-docs/shopping-cart-example/#api-endpoints","title":"API Endpoints","text":"<p>For a detailed implementation of the Sanic HTTP API refer to  app.py</p>"},{"location":"styx-docs/shopping-cart-example/#order","title":"\ud83d\udce6 Order","text":"Endpoint Description <code>POST /orders/create/&lt;user_key&gt;</code> Create a new order <code>POST /orders/checkout/&lt;order_id&gt;</code> Attempt to complete the order <code>POST /orders/addItem/&lt;order&gt;/&lt;item&gt;/&lt;qty&gt;</code> Add item to an order <code>GET  /orders/find/&lt;order_id&gt;</code> Lookup order state <code>POST /orders/batch_init/...</code> Bulk-create sample orders"},{"location":"styx-docs/shopping-cart-example/#payment","title":"\ud83d\udcb3 Payment","text":"Endpoint Description <code>POST /payment/create_user</code> Register a new user <code>POST /payment/add_funds/&lt;id&gt;/&lt;amt&gt;</code> Add credit to a user <code>GET  /payment/find_user/&lt;id&gt;</code> Fetch user credit info <code>POST /payment/batch_init/...</code> Initialize many users at once"},{"location":"styx-docs/shopping-cart-example/#stock","title":"\ud83c\udff7\ufe0f Stock","text":"Endpoint Description <code>POST /stock/item/create/&lt;price&gt;</code> Create a stock item <code>POST /stock/add/&lt;item&gt;/&lt;qty&gt;</code> Add inventory <code>GET  /stock/find/&lt;item&gt;</code> Lookup inventory and price <code>POST /stock/batch_init/...</code> Bulk insert stock items"},{"location":"styx-docs/shopping-cart-example/#operator-logic","title":"Operator Logic","text":"<p>For the implementation of the Styx operator functions refer to  functions</p>"},{"location":"styx-docs/shopping-cart-example/#order-operator","title":"Order Operator","text":"<ul> <li><code>create_order(user_id)</code> \u2192 initializes empty cart</li> <li><code>add_item(item_id, qty)</code> \u2192 makes remote call to stock</li> <li><code>checkout()</code> \u2192 removes credit and stock remotely</li> <li><code>find()</code> \u2192 returns order state</li> </ul>"},{"location":"styx-docs/shopping-cart-example/#payment-operator","title":"Payment Operator","text":"<ul> <li><code>create_user()</code> \u2192 zero credit</li> <li><code>add_credit(amount)</code> \u2192 modifies user balance</li> <li><code>remove_credit(amount)</code> \u2192 ensures no overdraft</li> </ul>"},{"location":"styx-docs/shopping-cart-example/#stock-operator","title":"Stock Operator","text":"<ul> <li><code>create_item(price)</code> \u2192 zero stock</li> <li><code>add_stock(amount)</code> \u2192 increase count</li> <li><code>remove_stock(amount)</code> \u2192 raise error if insufficient</li> <li><code>find_for_order()</code> \u2192 respond with price/availability</li> </ul> <p>This example highlights how Styx enables object-oriented cloud programming through fine-grained async workflows that are fault-tolerant and distributed by design.</p>"},{"location":"styx-docs/state-backends/","title":"State Backends","text":""},{"location":"styx-docs/state-backends/#styx.common.local_state_backends.LocalStateBackend","title":"<code>LocalStateBackend</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enumeration of local state backend implementations for Styx operators.</p> <p>This enum specifies which in-memory or local structure is used to manage operator state.</p> Values <p>DICT: Uses a plain Python dictionary as the state backend.</p>"},{"location":"styx-docs/styx-future/","title":"Styx Futures","text":""},{"location":"styx-docs/styx-future/#styx.client.styx_future.StyxResponse","title":"<code>StyxResponse(request_id, in_timestamp=-1, out_timestamp=-1, response=None)</code>  <code>dataclass</code>","text":"<p>               Bases: <code>object</code></p> <p>Encapsulates a response from a Styx function invocation.</p> <p>Attributes:</p> Name Type Description <code>request_id</code> <code>bytes</code> <p>The unique identifier of the request.</p> <code>in_timestamp</code> <code>int</code> <p>The time the request was sent, in ms.</p> <code>out_timestamp</code> <code>int</code> <p>The time the response was received, in ms.</p> <code>response</code> <code>any</code> <p>The actual response value returned.</p>"},{"location":"styx-docs/styx-future/#styx.client.styx_future.StyxResponse.styx_latency_ms","title":"<code>styx_latency_ms</code>  <code>property</code>","text":"<p>float: The measured latency of the function in milliseconds.</p>"},{"location":"styx-docs/styx-future/#styx.client.styx_future.BaseFuture","title":"<code>BaseFuture(request_id, timeout_sec, is_async=False)</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for representing asynchronous or blocking Styx results.</p> <p>Tracks a future-style response using either <code>threading.Event</code> or <code>asyncio.Event</code> based on the execution context.</p> <p>Attributes:</p> Name Type Description <code>_timeout</code> <code>int</code> <p>Timeout duration in seconds.</p> <code>_val</code> <code>StyxResponse</code> <p>Encapsulated response and timestamps.</p> <code>_condition</code> <code>Event | Event</code> <p>Event object (threading or asyncio) to signal completion.</p> <p>Initializes a future for a given request.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>bytes</code> <p>Unique ID for the request.</p> required <code>timeout_sec</code> <code>int</code> <p>Timeout in seconds.</p> required <code>is_async</code> <code>bool</code> <p>Whether to use asyncio. Defaults to False.</p> <code>False</code>"},{"location":"styx-docs/styx-future/#styx.client.styx_future.BaseFuture.request_id","title":"<code>request_id</code>  <code>property</code>","text":"<p>bytes: The request ID associated with this future.</p>"},{"location":"styx-docs/styx-future/#styx.client.styx_future.BaseFuture.done","title":"<code>done()</code>","text":"<p>Checks if the future has been fulfilled.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the result is available, False otherwise.</p>"},{"location":"styx-docs/styx-future/#styx.client.styx_future.BaseFuture.set","title":"<code>set(response_val, out_timestamp)</code>","text":"<p>Fulfills the future with a response.</p> <p>Parameters:</p> Name Type Description Default <code>response_val</code> <code>any</code> <p>The value to store as the response.</p> required <code>out_timestamp</code> <code>int</code> <p>The time the response was received.</p> required <p>Raises:</p> Type Description <code>FutureAlreadySet</code> <p>If the future was already fulfilled.</p>"},{"location":"styx-docs/styx-future/#styx.client.styx_future.BaseFuture.set_in_timestamp","title":"<code>set_in_timestamp(in_timestamp)</code>","text":"<p>Sets the time the request was issued.</p> <p>Parameters:</p> Name Type Description Default <code>in_timestamp</code> <code>int</code> <p>Timestamp in milliseconds.</p> required"},{"location":"styx-docs/styx-future/#styx.client.styx_future.StyxFuture","title":"<code>StyxFuture(request_id, timeout_sec=30)</code>","text":"<p>               Bases: <code>BaseFuture</code></p> <p>Blocking future for retrieving Styx function results synchronously.</p> <p>Initializes a synchronous future.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>bytes</code> <p>Unique request ID.</p> required <code>timeout_sec</code> <code>int</code> <p>Timeout in seconds. Defaults to 30.</p> <code>30</code>"},{"location":"styx-docs/styx-future/#styx.client.styx_future.StyxFuture.get","title":"<code>get()</code>","text":"<p>Blocks until the result is available or times out.</p> <p>Returns:</p> Type Description <code>StyxResponse | None</code> <p>StyxResponse | None: The received response.</p> <p>Raises:</p> Type Description <code>FutureTimedOut</code> <p>If the future is not fulfilled within the timeout.</p>"},{"location":"styx-docs/styx-future/#styx.client.styx_future.StyxAsyncFuture","title":"<code>StyxAsyncFuture(request_id, timeout_sec=30)</code>","text":"<p>               Bases: <code>BaseFuture</code></p> <p>Async future for retrieving Styx function results with asyncio.</p> <p>Initializes an asynchronous future.</p> <p>Parameters:</p> Name Type Description Default <code>request_id</code> <code>bytes</code> <p>Unique request ID.</p> required <code>timeout_sec</code> <code>int</code> <p>Timeout in seconds. Defaults to 30.</p> <code>30</code>"},{"location":"styx-docs/styx-future/#styx.client.styx_future.StyxAsyncFuture.get","title":"<code>get()</code>  <code>async</code>","text":"<p>Awaits the result with a timeout.</p> <p>Returns:</p> Type Description <code>StyxResponse | None</code> <p>StyxResponse | None: The received response.</p> <p>Raises:</p> Type Description <code>FutureTimedOut</code> <p>If the future is not fulfilled within the timeout.</p>"},{"location":"styx-docs/styx-operator/","title":"Styx Operator","text":""},{"location":"styx-docs/styx-operator/#styx.common.operator.Operator","title":"<code>Operator(name, n_partitions=1)</code>","text":"<p>               Bases: <code>BaseOperator</code></p> <p>A stateful operator that executes user-defined stateful functions in Styx.</p> <p>This class handles function registration, partitioning logic, communication between workers, and execution of distributed function chains.</p> <p>Initializes the operator with a name and number of partitions.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the operator.</p> required <code>n_partitions</code> <code>int</code> <p>The number of partitions. Defaults to 1.</p> <code>1</code>"},{"location":"styx-docs/styx-operator/#styx.common.operator.Operator.register","title":"<code>register(func)</code>","text":"<p>Registers a function with this operator.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>type</code> <p>The function class or callable to register.</p> required"},{"location":"styx-docs/styx-operator/#styx.common.operator.Operator.set_n_partitions","title":"<code>set_n_partitions(n_partitions)</code>","text":"<p>Sets the number of partitions and updates the partitioner.</p> <p>Parameters:</p> Name Type Description Default <code>n_partitions</code> <code>int</code> <p>New number of partitions.</p> required"},{"location":"styx-docs/styx-operator/#styx.common.operator.Operator.which_partition","title":"<code>which_partition(key)</code>","text":"<p>Determines the partition for a given key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Any</code> <p>The key to partition.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The partition number.</p>"},{"location":"styx-docs/styx-operator/#styx.common.base_operator.BaseOperator","title":"<code>BaseOperator(name, n_partitions=1)</code>","text":"<p>               Bases: <code>object</code></p> <p>Abstract base class for Styx operators.</p> <p>This class defines the required interface for any operator used in a Styx dataflow. Concrete subclasses must implement partitioning logic.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the operator.</p> <code>n_partitions</code> <code>int</code> <p>Number of partitions used by the operator.</p> <p>Initializes a base operator with a name and number of partitions.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the operator.</p> required <code>n_partitions</code> <code>int</code> <p>Number of partitions. Defaults to 1.</p> <code>1</code>"},{"location":"styx-docs/styx-operator/#styx.common.base_operator.BaseOperator.which_partition","title":"<code>which_partition(key)</code>  <code>abstractmethod</code>","text":"<p>Determines the partition index for a given key.</p> <p>This method must be implemented by subclasses.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Any</code> <p>A key used to determine the partition.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The partition number corresponding to the key.</p> <p>Raises:</p> Type Description <code>NotImplementedError</code> <p>If not overridden by a subclass.</p>"},{"location":"styx-docs/styx-stateflow-graph/","title":"Stateflow Graph","text":""},{"location":"styx-docs/styx-stateflow-graph/#styx.common.stateflow_graph.StateflowGraph","title":"<code>StateflowGraph(name, operator_state_backend)</code>","text":"<p>               Bases: <code>object</code></p> <p>Represents a dataflow graph of operators in a Styx application.</p> <p>Each node in the graph is an operator. The graph tracks the execution structure, provides utilities for topic resolution, and enables operator lookup and iteration.</p> <p>Initializes the StateflowGraph.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the graph.</p> required <code>operator_state_backend</code> <code>LocalStateBackend</code> <p>The state backend used by all operators.</p> required"},{"location":"styx-docs/styx-stateflow-graph/#styx.common.stateflow_graph.StateflowGraph.__iter__","title":"<code>__iter__()</code>","text":"<p>Returns an iterator over (operator_name, operator) pairs.</p> <p>Returns:</p> Type Description <code>Iterator[tuple[str, BaseOperator]]</code> <p>Iterator[tuple[str, BaseOperator]]: Iterable of name-operator pairs.</p>"},{"location":"styx-docs/styx-stateflow-graph/#styx.common.stateflow_graph.StateflowGraph.add_operator","title":"<code>add_operator(operator)</code>","text":"<p>Adds a single operator to the graph.</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>BaseOperator</code> <p>Operator instance to add.</p> required"},{"location":"styx-docs/styx-stateflow-graph/#styx.common.stateflow_graph.StateflowGraph.add_operators","title":"<code>add_operators(*operators)</code>","text":"<p>Adds multiple operators to the graph.</p> <p>Parameters:</p> Name Type Description Default <code>*operators</code> <code>BaseOperator</code> <p>Variable-length list of BaseOperator instances.</p> <code>()</code>"},{"location":"styx-docs/styx-stateflow-graph/#styx.common.stateflow_graph.StateflowGraph.get_egress_topic_names","title":"<code>get_egress_topic_names()</code>","text":"<p>Returns the Kafka egress topic names for all operators.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: A list of topic names with '--OUT' suffix.</p>"},{"location":"styx-docs/styx-stateflow-graph/#styx.common.stateflow_graph.StateflowGraph.get_operator","title":"<code>get_operator(operator)</code>","text":"<p>Retrieves an operator from the graph by name.</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>BaseOperator</code> <p>The operator whose name will be used as a key.</p> required <p>Returns:</p> Name Type Description <code>BaseOperator</code> <code>BaseOperator</code> <p>The corresponding operator instance.</p>"},{"location":"styx-docs/styx-stateful-function/","title":"Stateful Function","text":""},{"location":"styx-docs/styx-stateful-function/#styx.common.stateful_function.StatefulFunction","title":"<code>StatefulFunction(key, function_name, partition, operator_name, operator_state, networking, dns, t_id, request_id, fallback_mode, use_fallback_cache, partitioner, protocol)</code>","text":"<p>               Bases: <code>Function</code></p> <p>Encapsulates a stateful function in a distributed Styx operator.</p> <p>This class wraps user-defined functions with access to state, networking, partitioning, and chain coordination. It supports fallback execution and asynchronous remote function chaining.</p> <p>Initializes a stateful function with execution context.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Any</code> <p>The key of the function.</p> required <code>function_name</code> <code>str</code> <p>Name of the user-defined function.</p> required <code>partition</code> <code>int</code> <p>Partition ID where this function will execute.</p> required <code>operator_name</code> <code>str</code> <p>Name of the operator this function belongs to.</p> required <code>operator_state</code> <code>BaseOperatorState</code> <p>The state backend to use.</p> required <code>networking</code> <code>NetworkingManager</code> <p>Handles communication and coordination.</p> required <code>dns</code> <code>dict</code> <p>Mapping of operator partitions to worker locations.</p> required <code>t_id</code> <code>int</code> <p>Transaction ID.</p> required <code>request_id</code> <code>bytes</code> <p>Unique identifier for this function invocation.</p> required <code>fallback_mode</code> <code>bool</code> <p>Whether to enable fallback (recovery) logic.</p> required <code>use_fallback_cache</code> <code>bool</code> <p>Whether to use cached fallback results.</p> required <code>partitioner</code> <code>BasePartitioner</code> <p>The partitioning strategy.</p> required <code>protocol</code> <code>BaseTransactionalProtocol</code> <p>Protocol for function invocation.</p> required"},{"location":"styx-docs/styx-stateful-function/#styx.common.stateful_function.StatefulFunction.data","title":"<code>data</code>  <code>property</code>","text":"<p>dict: All state associated with the current operator, and partition.</p>"},{"location":"styx-docs/styx-stateful-function/#styx.common.stateful_function.StatefulFunction.key","title":"<code>key</code>  <code>property</code>","text":"<p>The key for this function instance.</p>"},{"location":"styx-docs/styx-stateful-function/#styx.common.stateful_function.StatefulFunction.call_remote_async","title":"<code>call_remote_async(operator_name, function_name, key, params=tuple())</code>","text":"<p>Queues a remote asynchronous function call.</p> <p>Parameters:</p> Name Type Description Default <code>operator_name</code> <code>str</code> <p>Name of the target operator.</p> required <code>function_name</code> <code>Type | str</code> <p>Function type or name to invoke.</p> required <code>key</code> <code>Any</code> <p>Key for the remote call.</p> required <code>params</code> <code>tuple</code> <p>Parameters for the remote function call.</p> <code>tuple()</code>"},{"location":"styx-docs/styx-stateful-function/#styx.common.stateful_function.StatefulFunction.get","title":"<code>get()</code>","text":"<p>Retrieves the value from state for the current key.</p> <p>Returns:</p> Name Type Description <code>object</code> <code>Any</code> <p>The current value associated with the key.</p>"},{"location":"styx-docs/styx-stateful-function/#styx.common.stateful_function.StatefulFunction.put","title":"<code>put(value)</code>","text":"<p>Stores a value in the state for the current key.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to store.</p> required"},{"location":"styx-docs/sync-styx-client/","title":"Sync Styx Client","text":""},{"location":"styx-docs/sync-styx-client/#styx.client.sync_client.SyncStyxClient","title":"<code>SyncStyxClient(styx_coordinator_adr, styx_coordinator_port, kafka_url)</code>","text":"<p>               Bases: <code>BaseStyxClient</code></p> <p>Synchronous client for interacting with a Styx deployment.</p> <p>This client handles dataflow submission and event communication with Styx via Kafka and TCP. It manages metadata and result consumption threads, handles serialization, and tracks outstanding futures.</p> <p>Initializes a synchronous Styx client.</p> <p>Parameters:</p> Name Type Description Default <code>styx_coordinator_adr</code> <code>str</code> <p>Address of the Styx coordinator.</p> required <code>styx_coordinator_port</code> <code>int</code> <p>Port of the Styx coordinator.</p> required <code>kafka_url</code> <code>str</code> <p>Kafka bootstrap server URL.</p> required"},{"location":"styx-docs/sync-styx-client/#styx.client.sync_client.SyncStyxClient.close","title":"<code>close()</code>","text":"<p>Closes the client, terminating consumers and flushing producers.</p>"},{"location":"styx-docs/sync-styx-client/#styx.client.sync_client.SyncStyxClient.flush","title":"<code>flush()</code>","text":"<p>Flushes the Kafka producer buffer to ensure all messages are sent.</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If flushing fails to empty the queue.</p>"},{"location":"styx-docs/sync-styx-client/#styx.client.sync_client.SyncStyxClient.get_operator_partition","title":"<code>get_operator_partition(key, operator)</code>","text":"<p>Returns the partition for a given key/operator pair.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Any</code> <p>Partitioning key.</p> required <code>operator</code> <code>BaseOperator</code> <p>Operator to route the key to.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Partition number for the given key.</p>"},{"location":"styx-docs/sync-styx-client/#styx.client.sync_client.SyncStyxClient.open","title":"<code>open(consume=True)</code>","text":"<p>Opens the Kafka producer and starts consumer threads.</p> <p>Parameters:</p> Name Type Description Default <code>consume</code> <code>bool</code> <p>If True, also starts the results consumer.</p> <code>True</code>"},{"location":"styx-docs/sync-styx-client/#styx.client.sync_client.SyncStyxClient.send_event","title":"<code>send_event(operator, key, function, params=tuple(), serializer=Serializer.MSGPACK)</code>","text":"<p>Sends a single event to an operator.</p> <p>Parameters:</p> Name Type Description Default <code>operator</code> <code>BaseOperator</code> <p>Target operator.</p> required <code>key</code> <code>Any</code> <p>Partitioning key for the event.</p> required <code>function</code> <code>Type | str</code> <p>Function or method to invoke.</p> required <code>params</code> <code>tuple</code> <p>Parameters to the function.</p> <code>tuple()</code> <code>serializer</code> <code>Serializer</code> <p>Serialization strategy.</p> <code>MSGPACK</code> <p>Returns:</p> Name Type Description <code>StyxFuture</code> <code>StyxFuture</code> <p>Future associated with the event.</p>"},{"location":"styx-docs/sync-styx-client/#styx.client.sync_client.SyncStyxClient.submit_dataflow","title":"<code>submit_dataflow(stateflow_graph, external_modules=None)</code>","text":"<p>Submits a dataflow graph to the Styx coordinator.</p> <p>Parameters:</p> Name Type Description Default <code>stateflow_graph</code> <code>StateflowGraph</code> <p>The graph to submit.</p> required <code>external_modules</code> <code>tuple</code> <p>Extra modules needed by operators.</p> <code>None</code>"}]}